knitr::opts_chunk$set(echo = TRUE)
b <- data.frame()
row.names(b) <- c(1,2,3)
b <- data.frame()
b
class(b)
length(mtcars)
nrows(mtcars)
nrow(mtcars)
mtcars[nrow(mtcars), ]
?reverse
?rev
?seq
seq(1,3)
seq(3,1)
mtcars[seq(nrow(mtcars), nrow(mtcars) - 3), ]
library(pryr)
graphIt <- function(code){
x11()
force(code)
ans <- readline(prompt="Press anykey to turn off graph.")
dev.off()
}
graphIt(plot(1:10))
library(pryr)
t.test <- function(x) "A method"
cat("\n# Use method t.test\n")
t(structure(matrix(1:30, 5, 6), class = "test"))
cat("\n# Function t.test is overwritten\n")
tryCatch(t.test(1:10, y = c(7:20)),
error = function(e) e) # throws an error
cat("\n# Specify stats package to call function t.test\n")
stats::t.test(1:10, y = c(7:20)) # specify stats package is required.
t.test <- function(x) "A method"
# Use method t.test\n
t(structure(matrix(1:30, 5, 6), class = "test"))
# Function t.test is overwritten\n
tryCatch(t.test(1:10, y = c(7:20)),
error = function(e) e) # throws an error
# Specify stats package to call function t.test\n
stats::t.test(1:10, y = c(7:20)) # specify stats package is required.
library(pryr)
library(knitr)
assignSpecial <- function(x, value, binding = "locked", env = parent.frame()){
if (binding == "locked") {
assign(x, value, envir = env)
} else if (binding == "active") {
makeActiveBinding(x, value, env = env)
} else if (binding == "delayed") {
delayedAssign(x, dlv, eval.env = env, assign.env = env)
return("Assign the delayed value to variable dlv.")
}
}
assignSpecial("a", 1)
a
f <- function(){
runif(1)
}
assignSpecial("b", f, binding = "active")
assignSpecial("c", binding = "delayed")
dlv = 123
c
assignSpecial("b", f, binding = "active")
rm(b)
assignSpecial("b", f, binding = "active")
b
b
assignSpecial <- function(x, value, binding = "locked", env = parent.frame()){
if (binding == "locked") {
assign(x, value, envir = env)
} else if (binding == "active") {
makeActiveBinding(x, value, env = env)
} else if (binding == "delayed") {
delayedAssign(x, dlv, eval.env = env, assign.env = env)
return("Assign the delayed value to variable dlv.")
}
}
assignSpecial("a", 1)
a
f <- function(){
runif(1)
}
assignSpecial("b", f, binding = "active")
b
b
assignSpecial("c", binding = "delayed")
dlv = 123
c
lag <- function(x, n = 1L) {
# (1) returns a useful error message if n is not a vector
if (!is.vector(x))
stop(("Error: input is not a vector"))
# (2) has reasonable behaviour when n is 0 or longer than x
stopifnot(n != 0)
stopifnot(n <= length(x))
xlen <- length(x)
c(rep(NA, n), x[seq_len(xlen - n)])
}
lag(c(1:5))
try(lag(mtcars))
try(lag(c(1:5), 0))
try(lag(c(1:5), 6))
?try
?tryCatch
library(memoise)
library(plyr)
library(pryr)
library(evaluate)
# return a linear function with slope a and intercept b.
f <- function(a, b) function(x) a * x + b
# create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
# should return 0 * 3 + 0 = 0
# return a linear function with slope a and intercept b.
f <- function(a, b) function(x) a * x + b
# create a list of functions with different parameters.
fs <- Map(f, a = c(0, 1), b = c(0, 1))
# should return 0 * 3 + 0 = 0
fs[[1]](3)
# [1] 0
df <- data.frame(x = c(1:20),
y = letters[1:20],
z = tail(LETTERS, 20),
stringsAsFactors = FALSE)
# m must be less than the number of rows in the target data frame
m <- 5
initial_row <- sample(nrow(df) - m, 1)
df[seq(initial_row, initial_row+m-1),]
sample(5, 1)
?sample
sum
print(sum)
body(sum)
f
filter
lag
scan
sum
c(10)
typeof(c(10))
is.vector(c(10))
is.vector(c(c = 10))
names(c(c = 10))
`r_replacement<-` <- function(x, value) {
x[sample(length(x), 1)] <- value
x
}
for (i in 1:5) {
x <- 1:10
r_replacement(x) <- 5L
print(x)
}
for (i in 1:5) {
x <- 1:10
r_replacement(x) <- 5L
print(x)
}
library(pryr)
library(stats4)
library(methods)
y <- 1
g <- function(x) {
y <- 2
UseMethod("g")
}
g.numeric <- function(x) y
g(10)
h <- function(x) {
x <- 10
UseMethod("h")
}
h.character <- function(x) paste("char", x)
h.numeric <- function(x) paste("num", x)
h("a")
methods_objs <- mget(ls("package:methods"), inherits = TRUE)
is_S4 <- sapply(methods_objs, isS4)
S4_generics <- methods_objs[is_S4]
S4_methods_list <- lapply(names(S4_generics), .S4methods)
# S4 generic with most methods
most_S4_methods <-
S4_generics[sapply(S4_methods_list, length) ==
max(sapply(S4_methods_list, length))]
names(most_S4_methods)
# Number of methods
length(methods(names(most_S4_methods[1])))
ext_classes <- sapply(all_classes, extends)
search()
rec_env(environment())
rec_env <- function(env){
# Global environment
if (is.null(attr(env, "name"))) {
print(env)
} else {
# Environments created by package
print(attr(env, "name"))
}
# Empty environment
if (identical(env, baseenv()))
return(emptyenv())
return(rec_env(parent.env(env = env)))
}
search()
rec_env(environment())
rm(c)
assign_new <- function(x, value, env = parent.frame()){
if (exists(x, where = 1, envir = env, inherits = FALSE)){
return(paste(x, "already exists."))
} else {
assign(x, value, envir = env)
}
}
a <- 1
assign_new("a", 3)
a
assign_new("c", 2)
c
a <- 1
assign_new("a", 3)
a
assign_new("d", 2)
d
col_means_re <- function(df) {
# Stop if the input is not a data frame
stopifnot(is.data.frame(df))
# Use vapply() rather than sapply so that a vector or array will always return
# (sapply() returns an unmaed list when output length = 0)
numeric <- vapply(df, is.numeric, logical(1))
# Use drop = FALSE to avoid accidentally converting
# 1-column data frames into vectors.
numeric_cols <- df[, numeric, drop = FALSE]
data.frame(lapply(numeric_cols, mean))
}
try(col_means_re(1:10))
mtcars2 <- mtcars
mtcars2[-1]
try(col_means_re(mtcars))
try(col_means_re(mtcars[, 0]))
try(col_means_re(mtcars[0, ]))
try(col_means_re(mtcars[, "mpg", drop = F]))
print(try(col_means_re(1:10)))
print(try(col_means_re(as.matrix(mtcars))))
print(try(col_means_re(as.list(mtcars))))
mtcars2 <- mtcars
mtcars2[-1] <- lapply(mtcars2[-1], as.character)
try(col_means_re(mtcars2))
library(parallel)
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
list_lm <- vector("list", length(formulas))
for (i in 1:length(formulas)){
list_lm[i] <- lm(formulas[i], data = mtcars)
}
list_lm <- vector("list", length(formulas))
for (i in 1:length(formulas)){
list_lm[[i]] <- lm(formulas[[i]], data = mtcars)
}
lapply(list_lm, function(x) round(x$coefficients, 5))
list_test <-
list(a = c(1:5),
b = replicate(5, NA))
is.na(list_test)
sapply(list_test, function(x) all(is.na(x)))
list_test
is.na(list_test)
list_test <-
list(a = c(1:5),
b = replicate(5, NA))
list_test
is.na(list_test)
sapply(list_test, function(x) all(is.na(x)))
evaluate_it <- function(f) {
force(f)
function(...) {
evaluate(try(f(...)))
}
}
x1 <- evaluate_it(log)(11)
x2 <- evaluate_it(log)(-1)
x3 <- evaluate_it(log)("a")
x1[[2]]
x2[[2]]
x3[[2]]
